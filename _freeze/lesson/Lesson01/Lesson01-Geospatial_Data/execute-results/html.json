{
  "hash": "cac4a47264f5b944ebf252874564431a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Lesson 1: Fundamental of Geospatial Data Models and Modelling'\nsubtitle: \"\"\nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2025-08-15\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD MMM YYYY\"    \neditor: visual\nexecute: \n  freeze: true\n---\n\n## Content\n\n-   An Overview of Geospatial Data Models\n\n    -   Vector and raster data model\n    -   Coordinate systems and map projection\n\n-   Vector Data Wrangling and Analysis Methods\n-   Raster Data Wrangling and Analysis Methods\n\n\n::: notes\nThis lesson consists of two parts. First, I will talk about Geospatial Data Models. For students who have taken SMT201 GIS for Urban Planning, this is not new at all. However, for students who did not read SMT201, this will be new. Anyway, the focus of this section will be on R. Hence, even for students who have taken SMT201 before, this will be a good revision.\n\nIn part two of this lesson, I will introduce sp package. It is a relatively new R package specially developed to handle geospatial data R using tidyverse principle.\n:::\n\n## Geospatial Data Models\n\n### Why should we worry about?\n\n![](img/image2-1.jpg)\n\n::: notes\nIt is important for us to note that what ever data capture in a database is a model of the real world. When we say model, this means that it is a simplify version of the real world and not the real world themselves.\n:::\n\n## Basic Spatial Data Models\n\n-   Vector - implementation of discrete object conceptual model\n    -   Point, line and polygon representations.\n    -   Widely used in cartography, and network analysis.\n-   Raster -- implementation of field conceptual model\n    -   Array of cells used to represent objects.\n    -   Useful as background maps and for spatial analysis.\n\n::: notes\nIn general, there are two types of geospatial data models, namely vector and raster data models.\n\nVector data model tends to be used to store geospatial data that are discrete in nature. For example bus stop, building footprint, planning area.\n\nRaster data model, one the other hands, are used to store continuous fenomena such as air polution, elevation and precipitation.\n:::\n\n------------------------------------------------------------------------\n\n### Vector Data Models\n\n-   There are three basic geometric primitives, namely: **points**, **lines (or polylines)** and **polygons**.\n\n![](img/image2-2.jpg)\n\n::: notes\nFor vector data model, there are three most commonly used geometric primitives, namely: points, lines and polygons.\n\nIn this figure, building footprints are represented by polygon features, road reserves represented by polyline features, and convenient stores are represented by point features.\n\nIt it important to note that the geospatial information content of these three features are not the same.\n\n-   A point is composed of one coordinate pair representing a specific location in a coordinate system.\n-   A line or polyline is composed of a sequence of two or more coordinate pairs called vertices. For line beside the location information we also know the length.\n-   A polygon is composed of three or more line segments whose starting and ending coordinate pairs are the same. For polygon, we know location, length (i.e. parameter) and area.\n:::\n\n------------------------------------------------------------------------\n\n### Raster Data Models\n\n-   All raster formats are basically the same\n    -   Cells organized in a matrix of rows and columns.\n    -   Content is more important than format: data or picture?\n\n![](img/image2-3.jpg)\n\n::: notes\nDifferent from vector data model, a single feature type is used to represent the real world. The most commonly used geometric is grid. Also note that in raster data model, the observed values (i.e. precipitation) are encoded explicitly on the cells. In general a value between 0-255 (binary data strcuture) is used. If the value is greater than 255, streching will be applied.\n:::\n\n## Coordinate Systems and Map Projections\n\n### What is a coordinate system?\n\n:::::: columns\n:::: {.column width=\"50%\"}\nA coordinate system is an important property of an geospatial data. It provides a location reference to the geospatial data.\n\n-   There are two common types of coordinate systems used in mapping, namely: **geographic coordinate systems** and **projected coordinate system**.\n\n::: callout-tip\n## Further Reading\n\n-   Refer to this [article](http://en.wikipedia.org/wiki/Map_projection) and [Chapter 9 Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html) to learn more about map projection.\n:::\n::::\n\n::: {.column width=\"50%\"}\n![](img/image2-4a.jpg)\n:::\n::::::\n\n::: notes\n-   A coordinate system is a reference system used to represent the locations of geographic features, imagery, and observations such as GPS locations within a common geographic framework.\n\n-   Each coordinate system is defined by:\n\n    -   Its measurement framework which is either geographic (in which spherical coordinates are measured from the earth's center) or planimetric (in which the earth's coordinates are projected onto a two-dimensional planar surface).\n    -   Unit of measurement (typically feet or meters for projected coordinate systems or decimal degrees for latitude--longitude).\n    -   The definition of the map projection for projected coordinate systems.\n    -   Other measurement system properties such as a spheroid of reference, a datum, and projection parameters like one or more standard parallels, a central meridian, and possible shifts in the x- and y-directions.\n:::\n\n------------------------------------------------------------------------\n\n### Geographical Coordinate Systems\n\n:::::: columns\n::: {.column width=\"50%\"}\n-   GCS define locations on the earth using a three-dimensional spherical surface. For example, WGS84.\n\n-   They provides accuracy position information. Unit of measurement will be in either decimal degree or degree-minute-second format.\n\n-   GCS, however, are not appropriate for distance and area measurements. In this figure, it is clear that 1 degree distance at the north pole is relatively shorter than 1 degree at the equator.\n:::\n\n:::: {.column width=\"50%\"}\n![](img/image2-4.jpg){fig-align=\"center\"}\n\n::: callout-tip\n## Further Reading\n\n-   Refer to [9.1 Geographic Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#geographic-coordinate-systems) to learn more about GCS.\n:::\n::::\n::::::\n\n------------------------------------------------------------------------\n\n### Projected Coordinate Systems (PCS)\n\n:::::: columns\n::: {.column width=\"50%\"}\n-   Based on a map projection such as transverse Mercator, Albers equal area, or Robinson.\n\n-   PCS provides consistent length and area measurement across space. Hence, it is important to transform a geospatial data from GCS to PCS before performing geospatial analysis.\n:::\n\n:::: {.column width=\"50%\"}\n![](img/image2-5.jpg){fig-align=\"center\"}\n\n::: callout-tip\n## Further Reading\n\n-   Refer to [9.2 Projected Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#projected-coordinate-systems) to learn more about GCS.\n:::\n::::\n::::::\n\n::: notes\nA **projected coordinate system** based on a map projection such as transverse Mercator, Albers equal area, or Robinson, all of which (along with numerous other map projection models) provide various mechanisms to project maps of the earth's spherical surface onto a two-dimensional Cartesian coordinate plane.\n\nProjected coordinate systems are sometimes referred to as **map projections**. For example, SVY21, the national projected coordinate system of Singapore.\n:::\n\n------------------------------------------------------------------------\n\n### Singapore Projected Coordinate System\n\n![](img/image2-6.jpg){fig-align=\"center\" width=\"640\"}\n\n[epsg.io](https://epsg.io/) provides a comprehensive list of country coordinate systems such as [svy21](https://epsg.io/3414).\n\n::: notes\nEach country will have her own projected coordinate system. Some country have more than one type of Project Coordinate Systems.\n\nThere are at least three coordinate systems commonly used in Singapore. They are svy21, Kertau Cassini 1968, and Rectified Skewed Orthomorphic (RSO). RSO is used in military and topographical mapping and svy21 is used for land and engineering surveying, cadastre, landuse and infrastructure mapping.\n:::\n\n------------------------------------------------------------------------\n\n### Coordinates Reference Systems in R\n\n-   In R, the notation used to describe the CRS is **proj4string** from the **PROJ.4** library. It looks like this:\n\n> +proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs\n\n-   This library is interfaced with R in the [**rgdal**](http://rgdal.r-forge.r-project.org/) package, and the CRS class is defined partly in **sp**, partly in **rgdal**.\n-   A **CRS** object is defined as a character NA string or a valid PROJ.4 CRS definition.\n\n::: notes\nYou can break down the proj4 string into its individual components (again, separated by + signs) as follows:\n\n-   +proj=tmerc: the projection is Transverse Mercator\n-   +lat_0: Latitude of origin\n-   +lon_0: Central meridian\n-   +k: Scaling factor\n-   +x_0: False easting\n-   +y_0: False northing\n-   +units=m: the units for the coordinates are in METERS\n-   +ellps=WGS84: the ellipsoid (how the earth's roundness is calculated) for the data is WGS84\n-   The EPSG list among other sources is used in the workhorse PROJ.4 library, which as implemented by Frank Warmerdam handles transformation of spatial positions between different CRS.\n:::\n\n## Standard for Geospatial Data Handling and Analysis\n\n![](img/image2-20.jpg)\n\n::: callout-tip\n## Further Reading\n\nFor more information, visit this [link](https://www.ogc.org/standards/sfa#overview).\n:::\n\n::: notes\nThe OGC OpenGIS Implementation Standard for Geographic Information / ISO 19125 defines:\n\n-   **Geometric objects** which can be of type point, line, polygon, multi-point, etc, and are associated to a given Coordinate Reference System;\n-   **Methods on geometric objects** return properties like dimension, boundary, area, centroid, etc;\n-   **Methods for testing spatial relations between geometric objects** equals, disjoint, intersects, touches, crosses, within, contains, overlaps and relate, which returns TRUE or FALSE;\n-   **Methods that support spatial analysis** distance, which returns a distance, and buffer, convex hull, intersection, union, difference, and symmetric difference, which returns new geometric objects.\n\nSource: www.opengeospatial.org/standards/sfa\n:::\n\n## An introduction to simple features\n\n-   **feature**: abstraction of real world phenomena (type or instance); has a geometry and other attributes (properties)\n\n-   **simple feature**: feature with all geometric attributes described piecewise by straight line or planar interpolation between sets of points (no curves)\n\n-   It is a hierarchical data model that simplifies geographic data by condensing a complex range of geographic forms into a single geometry class.\n\n------------------------------------------------------------------------\n\n### Simple features specification\n\n-   [*Simple features specification*](https://en.wikipedia.org/wiki/Simple_Features) is an open standard developed and endorsed by the Open Geospatial Consortium (OGC) to represent a wide range of geographic information.\n\n![](img/image2-8.jpg){fig-align=\"center\"}\n\n::: notes\nThere are a total of 17 geometric types in OGC Simple Features specification. They are:\n:::\n\n------------------------------------------------------------------------\n\n### Commonly used simple features\n\n![](img/image2-9.jpg){fig-align=\"center\"}\n\n::: notes\nOnly 7 out of 17 possible types of simple feature are currently used in the vast majority of GIS operations. They are:\n:::\n\n------------------------------------------------------------------------\n\n### Simple Features: How they look like?\n\n![](img/image2-11.jpg)\n\n------------------------------------------------------------------------\n\n### Simple Features: How they look like?\n\n![](img/image2-12.jpg)\n\n------------------------------------------------------------------------\n\n### Simple Features: How they look like?\n\n-   Geometry collection: [GEOMETRYCOLLECTION (MULTIPOINT (5 2, 1 3, 3 4, 3 2), LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2))]{style=\"font-family: Courier New; font-size: 0.85em\"}\n\n![](img/image2-12.png){fig-align=\"center\"}\n\n## Geospatial Data Object Framework\n\n-   To begin with, all contributed packages for handling spatial data in R had different representations of the data. This made it difficult to exchange data both within R between packages, and between R and external le formats and applications.\n\n-   The first general package to provide classes and methods for spatial data types that was developed for R is called [**sp**](https://cran.r-project.org/web/packages/sp/vignettes/intro_sp.pdf). It was first released on CRAN in 2005.\n\n-   In late October 2016, [**sf**](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf) was first released on CRAN to provide standardised support for vector data in R.\n\n## R packages that support spatial classes\n\nIn general, three R packages will be used to handle vector-based geospatial data in spatial classes, they are:\n\n-   [**sp**](https://cran.r-project.org/web/packages/sp/index.html) provides classes and methods for dealing with spatial data in R.\n\n-   [**rgdal**](https://cran.r-project.org/web/packages/rgdal/index.html) allows R to understand the structure of a geospatial data file by providing functions to read and convert geospatial data into easy-to-work-with R dataframes.\n\n-   [**rgeos**](https://cran.r-project.org/web/packages/rgeos/index.html) implements the methods of the OGC standard.\n\n## Introducing sf Package\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) package provides a syntax and data-structures which are coherent with the [tidyverse](https://www.tidyverse.org/).\n-   A quick introduction can be found [here](https://journal.r-project.org/archive/2018/RJ-2018-009/index.html).\n-   For more detail, visit this [link](https://r-spatial.github.io/sf/).\n\n![](img/image2-10.jpg)\n\n------------------------------------------------------------------------\n\n### sf package dependencies\n\n![](img/image2-22.jpg)\n\nSource: [Tidy spatial data analysis](https://github.com/edzer/rstudio_conf)\n\n::: notes\nThe sf package depends on several external software components (installed along with the R package27), most importantly GDAL, GEOS and PROJ (Figure 7.3). These well-tested and popular open-source components are common to numerous open-source and commercial software for spatial analysis, such as QGIS and PostGIS.\n:::\n\n------------------------------------------------------------------------\n\n### sf & tidyverse\n\n-   sf spatial objects are data.frames (or tibbles)\n-   you can always un-sf, and work with tbl_df or data.frame having an sfc list-column\n-   sf methods for filter, arrange, distinct, group_by, ungroup, mutate, select have sticky geometry\n-   *st_join()* joins tables based on a spatial predicate\n-   summarise unions geometry by group (or altogether)\n\n::: notes\nAnother important feature of sf package is that it is designed base on tidyverse philosophy.\n:::\n\n------------------------------------------------------------------------\n\n### What is so special about sf?\n\n-   It builds upon the [simple features standard](https://en.wikipedia.org/wiki/Simple_Features) (not R specific!), represents natively in R all 17 simple feature types for all dimensions (XY, XYZ, XYM, XYZM),\n-   uses S3 classes: simple features are data.frame objects (or tibbles) that have a geometry list-column,\n-   interfaces to GEOS to support the DE9-IM,\n-   interfaces to GDAL with driver dependent dataset or layer creation options, Date and DateTime (POSIXct) columns, and coordinate reference system,\n-   transformations through PROJ.4,\n-   provides fast I/O with GDAL and GEOS using well-known-binary written in C++/Rcpp, and\n-   directly reads from and writes to spatial databases such as PostGIS using DBI.\n\n------------------------------------------------------------------------\n\n### sfg : geometry for one feature\n\n![](img/image2-13.jpg)\n\n------------------------------------------------------------------------\n\n### sf: objects with simple features\n\n![](img/image2-14.jpg)\n\n::: notes\n-   In green a **simple feature**: a single record, or data.frame row, consisting of attributes and geometry.\n-   In blue a single **simple feature geometry** (an object of class **sfg**).\n-   In red a **simple feature list-column** (an object of class **sfc**, which is a column in the data.frame).\n\nOne of the attributes of a geometry list-column (sfc) is the precision: a double number that, when non-zero, causes some rounding during conversion to WKB, which might help certain geometrical operations succeed that would otherwise fail due to floating point representation.\n\nThe model is that of GEOS, which copies from the Java Topology Suite (JTS), and works like this:\n\n-   if precision is zero (default, unspecified), nothing is modified.\n-   negative values convert to float (4-byte real) precision.\n-   positive values convert to round(x\\*precision)/precision.\n:::\n\n------------------------------------------------------------------------\n\n## sf functions\n\n-   Geospatial data handling\n\n-   Geometric confirmation\n\n-   Geometric operations\n\n-   Geometry creation\n\n-   Geometry operations\n\n-   Geometric measurement\n\n------------------------------------------------------------------------\n\n### Geospatial data handling functions\n\n-   [*st_read*](https://r-spatial.github.io/sf/reference/st_read.html) & *read_sf*: read simple features from file or database, or retrieve layer names and their geometry type(s)\n-   [*st_write*](https://r-spatial.github.io/sf/reference/st_write.html) & *write_sf*: write simple features object to file or database\n-   [*st_as_sf*](https://r-spatial.github.io/sf/reference/st_as_sf.html): convert a sf object from a non-geospatial tabular data frame\n-   [*st_as_text*](https://r-spatial.github.io/sf/reference/st_as_text.html): convert to Well Known Text(WKT)\n-   [*st_as_binary*](https://r-spatial.github.io/sf/reference/st_as_binary.html): convert to Well Known Binary(WKB)\n-   [*st_as_sfc*](https://r-spatial.github.io/sf/reference/st_as_sfc.html): convert geometries to sfc (e.g., from WKT, WKB) as(x, \"Spatial\"): convert to Spatial\\*\n-   [*st_transform*](https://r-spatial.github.io/sf/reference/st_transform.html)(x, crs, ...): convert coordinates of x to a different coordinate reference system\n\n------------------------------------------------------------------------\n\n### Popular geospatial data format supported by *read_st()*: ESRI shapefile\n\n::::: columns\n::: {.column width=\"50%\"}\n-   A [shapefile](http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf) is a simple, non-topological format for storing the geometric location and attribute information of geographic features.\n-   Geographic features in a shapefile can be represented by points, lines, or polygons (areas).\n\nSample code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_mpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE\")\n```\n:::\n\n\nand\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(st_poly, \"data/my_poly.shp\")\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](img/image2-7.jpg)\n:::\n:::::\n\n------------------------------------------------------------------------\n\n### Other vector GIS formats\n\n-   MapInfo [TAB](https://en.wikipedia.org/wiki/MapInfo_TAB_format) format - MapInfo's vector data format using TAB, DAT, ID and MAP files.\n-   [Personal Geodatabase](https://desktop.arcgis.com/en/arcmap/latest/manage-data/administer-file-gdbs/personal-geodatabases.htm) - Esri's closed, integrated vector data storage strategy using Microsoft's Access MDB format\n-   [Keyhole Markup Language (KML)](https://en.wikipedia.org/wiki/Keyhole_Markup_Language) - XML based open standard (by OpenGIS) for GIS data exchange.\n-   [Geography Markup Language (GML)](http://en.wikipedia.org/wiki/Geography_Markup_Language) - XML based open standard (by OpenGIS) for GIS data exchange.\n-   [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) - a lightweight format based on JSON, used by many open source GIS packages.\n-   [TopoJSON](https://github.com/topojson/topojson), an extension of GeoJSON that encodes topology.\n\nSample code chunk to import kml file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_preschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Geometric confirmation\n\nThe [commands](https://r-spatial.github.io/sf/reference/geos_binary_pred.html) below compare two sf data object and return a sparse matrix with matching (TRUE) indexes, or a full logical matrix.\n\n:::::::: columns\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.75em\"}\n-   *st_intersects*: touch or overlap\n-   *st_disjoint*: !intersects\n-   *st_touches*: touch\n-   *st_crosses*: cross (don't touch)\n-   *st_within*: within\n-   *st_contains*: contains\n-   *st_overlaps*: overlaps\n-   *st_covers*: cover\n-   *st_covered_by*: covered by\n-   *st_equals*: equals\n-   *st_equals_exact*: equals, with some fuzz returns a sparse (default) or dense logical matrix\n:::\n::::\n\n::::: {.column width=\"50%\"}\n![](img/image2-15.jpg)\n\n:::: callout-note\n::: {style=\"font-size: 0.95em\"}\nThese functions return a logical matrix indicating whether each geometry pair meeting the logical operation.\n:::\n::::\n:::::\n::::::::\n\n------------------------------------------------------------------------\n\n### sf Methods\n\n#### Geometry generating logical operators\n\n::::: columns\nThese [commands](https://r-spatial.github.io/sf/reference/geos_binary_ops.html) overlay two sf data frames.\n\n::: {.column width=\"50%\"}\n-   st_union: union of several geometries\n-   st_intersection: intersection of pairs of geometries\n-   st_difference: difference between pairs of geometries\n-   st_sym_difference: symmetric difference (xor)\n:::\n\n::: {.column width=\"50%\"}\n![](img/image2-18.jpg)\n:::\n:::::\n\n------------------------------------------------------------------------\n\n### sf Methods\n\n#### Higher-level operations: summarise, interpolate, aggregate, st_join\n\n::::: columns\n::: {.column width=\"50%\"}\n-   aggregate and summarise use *st_union* (by default) to group feature geometries\n-   *st_interpolate_aw*: area-weighted interpolation, uses st_intersection to interpolate or redistribute attribute values, based on area of overlap:\n-   *st_join* uses one of the logical binary geometry predicates (default: st_intersects) to join records in table pairs.\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nrd_joined = st_join(random_points, world) \n```\n:::\n\n\n![](img/image2-21.jpg){fig-align=\"center\" width=\"441\"}\n:::\n:::::\n\n------------------------------------------------------------------------\n\n### Manipulating geometries\n\nThe [commands](https://r-spatial.github.io/sf/reference/geos_unary.html) below perform unary operations on simple feature geometry sets.\n\n:::::: columns\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 0.75em\"}\n-   *st_line_merge*: merges lines\n-   *st_segmentize*: adds points to straight lines\n-   *st_voronoi*: creates voronoi tesselation\n-   *st_centroid*: gives centroid of geometry\n-   *st_convex_hull*: creates convex hull of set of points\n-   *st_triangulate*: triangulates set of points (not constrained)\n-   *st_polygonize*: creates polygon from lines that form a closed ring\n-   *st_simplify*: simplifies lines by removing vertices\n-   *st_split*: split a polygon given line geometry\n-   *st_buffer*: compute a buffer around this geometry/each geometry\n-   *st_make_valid*: tries to make an invalid geometry valid (requires lwgeom)\n-   *st_boundary*: return the boundary of a geometry\n:::\n::::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncentroid_poly <- st_centroid(poly)\n```\n:::\n\n\n![](img/image2-16.jpg){fig-align=\"center\" width=\"300\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuf_poly <- st_buffer(poly, 5)\n```\n:::\n\n\n![](img/image2-17.jpg){fig-align=\"center\" width=\"300\"}\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### Convenience functions\n\n::::: columns\n::: {.column width=\"50%\"}\n-   *st_zm*: sets or removes z and/or m geometry\n-   *st_coordinates*: retrieve coordinates in a matrix or data.frame\n-   *st_geometry*: set, or retrieve sfc from an sf object\n-   *st_is*: check whether geometry is of a particular type\n:::\n\n::: {.column width=\"50%\"}\n![](img/image2-19.jpg)\n:::\n:::::\n\n## References\n\n### All About **sf** package\n\n::: {style=\"font-size: 0.75em\"}\n-   [Reference manual](https://r-spatial.github.io/sf/reference/index.html)\n-   [Tidy spatial data analysis](https://www.rstudio.com/resources/rstudioconf-2018/tidy-spatial-data-analysis/)\n\n**Vignettes:**\n\n1.  [Simple Features for R](https://cran.r-project.org/web/packages/sf/vignettes/sf1.html)\n2.  [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n3.  [Manipulating Simple Feature Geometries](https://cran.r-project.org/web/packages/sf/vignettes/sf3.html)\n4.  [Manipulating Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf4.html)\n5.  [Plotting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf5.html)\n6.  [Miscellaneous](https://cran.r-project.org/web/packages/sf/vignettes/sf6.html)\n7.  [Spherical geometry in sf using s2geometry](https://r-spatial.github.io/sf/articles/sf7.html)\n\n**Others:**\n\n1.  [R spatial follows GDAL and PROJ development](https://www.r-spatial.org/r/2020/03/17/wkt.html)\n:::\n\n\n::: {.cell}\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}