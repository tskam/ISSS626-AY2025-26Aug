{
  "hash": "0c634fd803898074cfa0da7aa951c0ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Lesson 1: <br/>Fundamental of Geospatial Data Visualisation and tmap Methods'\nsubtitle: \"\"\nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2025-08-15\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD/MM/YYYY\"\nexecute:\n  eval: false\n  freeze: true\neditor: visual\n---\n\n## Content\n\n-   Introducing maps\n-   Typology of maps\n    -   Reference maps\n    -   Thematic maps\n-   Proportional Symbol Map\n-   Choropleth Mapping\n-   Introduction to tmap Methods\n\n::: notes\nThis lesson consists of two parts. First, I will share with you the concepts and design principles of choropleth maps. Next, I will introduce you to tmap, an R package specially designed for thematic mapping based on Layered Grammar of Graphics\n:::\n\n## What is a Map?\n\nA model of real world depict by a collection of cartographic symbols or/and visual abstraction.\n\n![](img/image6-1.jpg)\n\n------------------------------------------------------------------------\n\n### What is a Map?\n\nAn interface between geographical data and map users.\n\n![](img/image6-1b.jpg)\n\n------------------------------------------------------------------------\n\n### A Map and Geographical Data\n\n![](img/image6-1c.jpg)\n\n------------------------------------------------------------------------\n\n### Types of geographical data\n\n![](img/image6-1d.jpg)\n\n## Typology of Maps\n\n![](img/image6-6.jpg)\n\n------------------------------------------------------------------------\n\n### Reference maps\n\n::::: columns\n::: {.column width=\"30%\"}\n-   Reference maps emphasize the location of spatial phenomena, such buildings, roads, vegetations, rivers, etc. Some of popular reference maps are **topographical map** and internet map such as Google map.\n:::\n\n::: {.column width=\"65%\"}\n![](img/image6-7.jpg)\n:::\n:::::\n\n::: notes\nTopographic maps are detailed, accurate graphic representations of features that appear on the Earth's surface. These features include: cultural: roads, buildings, urban development, railways, airports, names of places and geographic features, administrative boundaries, state and international borders, reserves hydrography: lakes, rivers, streams, swamps, coastal flats relief: mountains, valleys, slopes, depressions vegetation: wooded and cleared areas, vineyards and orchards.\n\nA map legend (or key) lists the features shown on that map, and their corresponding symbols. Topographic maps usually show a geographic graticule and a coordinate grid, so you can determine relative and absolute positions of mapped features.\\\nIt is important to note that a map is merely a two or three dimensional representation of the physical environment at a given time. Therefore, a map will never be entirely up to date. Changes to the landscape and cultural features regularly occur (such as roads, vegetation, and buildings), resulting in maps becoming dated, although the rate of obsolescence varies depending upon location. Traditionally present in paper printed format.\n:::\n\n------------------------------------------------------------------------\n\n### Thematic Map\n\n:::::: columns\n:::: {.column width=\"50%\"}\n-   Thematic maps emphasize the spatial pattern of geographic attributes or statistics about places and relationships between places such as Life in Los Angeles.\n\n::: {style=\"font-size: 0.65em\"}\nSource: [Life in Los Angeles](https://mapdesign.icaci.org/2014/12/mapcarte-353365-life-in-los-angeles-by-eugene-turner-1977/)\n:::\n::::\n\n::: {.column width=\"50%\"}\n![](img/image6-8.jpg)\n:::\n::::::\n\n## Thematic Mapping: Principles and Methods\n\n-   Displaying\n    -   Qualitative data\n    -   Quantitative data\n-   Choosing -Appropriate classification method for displaying data\n    -   Appropriate number of classes\n-   Techniques in data analysis\n    -   Using the classification histogram\n    -   Normalizing data\n\n## Qualitative Thematic Maps\n\n### Visual Variables and Cartographic Symbols\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Qualitative visual variables are used for nominal scale data.\n-   The goal of qualitative visual variables is to show how entities differ from each other.\n-   The visual variables that do a good job of showing ordinal differences are: colour value, colour saturation, size and texture/grain.\\\n-   Figure on the right for examples of these four ordinal visual variables used each in point, linear and areal symbols.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image6-9.jpg)\n:::\n:::::\n\n## Qualitative Thematic Map\n\n### Point symbol map\n\n::::: columns\n::: {.column width=\"40%\"}\n-   Different point symbols are used to represent school types.\n:::\n\n::: {.column width=\"60%\"}\n![](img/image6-10.jpg)\n:::\n:::::\n\n## Qualitative Thematic Map\n\n### Line symbol map\n\n::::: columns\n::: {.column width=\"40%\"}\n-   A road map is an example of a thematic map. It shows the road network of an area. In this map, lines with different colour intensity and tickness are used to differentiate hierarchy of roads.\n:::\n\n::: {.column width=\"60%\"}\n![](img/image6-11.jpg){width=\"467\"}\n:::\n:::::\n\n## Qualitative Thematic Map\n\n### Area map\n\n::::: columns\n::: {.column width=\"40%\"}\n-   Land use map below is a good example of a discrete thematic map. In this map, different colours are use to represent different land use types.\n:::\n\n::: {.column width=\"60%\"}\n![](img/image6-12.jpg)\n:::\n:::::\n\n## Quantitative Thematic Map\n\n### Visual Variables and Cartographic Symbols\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Quantitative visual variables are used to display ordinal, interval or ratio scale data.\\\n-   The goal of the quantitative visual variable is to show relative magnitude or order between entities.\n-   The visual variables that do a good job of showing ordinal differences are: colour value, colour saturation, size and texture/grain.\\\n-   Figure on the right shows of these four ordinal visual variables used each in point, linear and areal symbols.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image6-13.jpg)\n:::\n:::::\n\n## Proportional Symbol Map\n\n-   The proportional symbol technique uses symbols of different sizes to represent data associated with different areas or locations within the map.\n\n![](img/image6-14.jpg)\n\n::: notes\nThe proportional symbol technique uses symbols of different sizes to represent data associated with different areas or locations within the map. For example, the proportional maps above use circle with different sizes to represent millions of people. There are two types of point features that are typically depicted with proportional symbols: features for which the data represents a geographic position directly (e.g., gallons of oil from individual oil wells), and features that are geographic areas to which data are aggregated and the data magnitudes are assigned to a representative point within the area (e.g., the geographic centroid of a state as in the examples above). In either case, the area of the symbol is scaled to represent the data magnitude, sometimes with a bit of exaggeration to adjust for a general tendency of human vision to underestimate differences in area. A variant on this direct data-to-symbol scaling groups values into categories first, then scales the symbol to represent the mean for the category, assigning a symbol to each place to represent the category range that the mean for the place falls within\n:::\n\n------------------------------------------------------------------------\n\n### How to size circles incorrectly and correctly?\n\nFigure below explains how attribute values are map on circles. One strategy to overcome this problem is to use square instead of circle.\n\n![](img/image6-16a.jpg)\n\n------------------------------------------------------------------------\n\n### How to make proportional symbol maps clearer?\n\nWhen designing a proportional symbol map, one of the important consideration is to avoid the circles blocking each other. One possible strategy to overcome this problem is to applying opacity (also known as transparency).\n\n![](img/image6-16b.jpg)\n\n------------------------------------------------------------------------\n\n### Proportional Symbol Map: Pie Chart Map\n\nOne important characteristic of proportional symbols is that they can easily be designed to represent more than one data value per location. Among the most common example is a **pie chart map** in which a circle is scaled proportionally to some total, and the size of wedges within the circle is scaled to depict a proportion of a total for two or more sub-categories.\n\n![](img/image6-15.jpg)\n\n::: notes\nOne important characteristic of proportional symbols is that they can easily be designed to represent more than one data value per location. Among the most common example is a \"pie chart map\" in which a circle is scaled proportionally to some total, and the size of wedges within the circle is scaled to depict a proportion of a total for two or more sub-categories. The map above uses circle size to depict total sales in each city, and the pie slices then depict proportion of the three shipping modes, namely: delivery truck, express air and regular air.\n:::\n\n------------------------------------------------------------------------\n\n### Proportional Symbol Map: Bar Chart Map\n\n**Proportional side-by-side bar map** places side-by-side bar chart on a map based on the location of the observations.\n\n![](img/image6-16.jpg)\n\n------------------------------------------------------------------------\n\n### Proportional Symbol Map - Junk Map\n\nWhen preparing a proportional symbol map, it is important to ensure that the geographical level used is the same.\n\n![](img/image6-16c.jpg)\n\n::: {style=\"font-size: 0.65em\"}\nSource: [COVID-19 Dashboard](https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6)\n:::\n\n------------------------------------------------------------------------\n\n### Altertive of Proportional Symbol Map: Bricks Map\n\nBricks Map aims to provide better ways to encode quantitative information graphically---ways that can be easily, efficiently, and accurately decoded.\n\n![](img/image6-17.jpg)\n\n::: {style=\"font-size: 0.65em\"}\nSource: [Building insight with bricks](http://www.perceptualedge.com/articles/visual_business_intelligence/building_insight_with_bricks.pdf).\n:::\n\n------------------------------------------------------------------------\n\n### Bricks Map versus Proportional Symbol Map\n\nBy plotting a proportional symbol map and a bricks map side-by-side as shown below, it is clear that bubbles of graduated sizes proportional to the value ranges that they represent can be difficult to distinguish than the bricks.\n\n::::: columns\n::: {.column width=\"50%\"}\n![](img/image6-17a.jpg)\n:::\n\n::: {.column width=\"50%\"}\n![](img/image6-17.jpg)\n:::\n:::::\n\n## Dot Density Map\n\nA dot-density map is a type of thematic map that uses dots or other symbols on the map to show the values of one or more numeric data fields. Each dot on a dot-density map represents some amount of data.\n\n![](img/image6-18.jpg)\n\n::: {style=\"font-size: 0.5em\"}\nOne dot represent 100 households.\n:::\n\n::: {style=\"font-size: 0.65em\"}\nReference: [Dot distribution map](https://en.wikipedia.org/wiki/Dot_distribution_map) at wiki and [Dot Density Maps](https://www.axismaps.com/guide/dot-density)\n:::\n\n## Choropleth Map\n\nA choropleth map is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population or per-capita income.\n\n![](img/image3-1.png)\n\n------------------------------------------------------------------------\n\n### Classified choropleth map\n\n-   Choropleth maps can be either classified or unclassified.\n-   A classed choropleth map combines areal units into a smaller number of groups. Interval levels may vary, but typically 4 to 7 are used in a map. There is different classification techniques used to divide up the intervals.\n\n![](img/image3-8.jpg)\n\n------------------------------------------------------------------------\n\n### Unclassified choropleth map\n\n-   Unclassed choropleth maps are similar to classed choropleth maps; however, unclassed choropleth maps do not have an averaged statistic towards each particular colour.\n\n![](img/image3-7.jpg)\n\n------------------------------------------------------------------------\n\n### Choosing an appropriate number of classes\n\n![](img/image3-9.jpg)\n\n::: notes\nThe more classes you use, the less data generalization (which is good), but this comes at the expense of legibility and the associated risk of map reading errors since more colors are harder to see and print reliably (which is bad). The key question is how much generalization do you want? A map with 3 classes/colors (e.g., low, medium, high) will be easy to see and remember, but may gloss over some very important aspects of the data and create artificial geographic patterns by lumping together many places that are in fact quite different. There is no ideal number of classes for a map, so experiment.\n:::\n\n## Data classification\n\n![](img/image3-10.png)\n\n::: notes\nNot sure how many classes to use? Have a look at the distribution of your data in a histogram (see examples below): Are there obvious clusters within your data? Are there large gaps in your data range that suggest nice compact data classes? If so, pick that number of classes and place those class breaks around those clusters.\n:::\n\n------------------------------------------------------------------------\n\n### Methods of choosing classes\n\n-   Based on the nature of the distribution\n    -   quantile, equal interval, natural breaks, standard deviations, defined interval\n-   Arbitrary\n    -   Can be based on round numbers.\n    -   Examples: Grouping according to age or census housing categories\n    -   Can result in empty categories\n\n------------------------------------------------------------------------\n\n### Data classification method: Quantile\n\n-   Same number of features per class.\n\n![](img/image3-11a.jpg){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n### Data classification method: Equal interval\n\n:::::: columns\n::: {.column width=\"70%\"}\n-   Divides the range of attribute values into equally sized classes.\n\n![](img/image3-11b.jpg){width=\"900\"}\n:::\n\n:::: {.column width=\"30%\"}\n::: callout-caution\n### Caution\n\nAvoid equal interval if your data are skewed to one end or if you have one or two really large outlier values. Outliers in that case will likely produce empty classes, wasting perfectly good classes with no observations in them. Since the hotel data above doesn't have really large outliers, this is a data distribution that works well with equal interval.\n:::\n::::\n::::::\n\n------------------------------------------------------------------------\n\n### Data classification method: Jenks (also known as Natural breaks)\n\n-   Default Jenk's statistical optimization\n-   Finds natural groupings in the data\n\n![](img/image3-11c.jpg)\n\n------------------------------------------------------------------------\n\n### Data classification: Standard deviation\n\n-   A measure of dispersion.\n-   Use if the distribution approximates a normal distribution (bell-shaped curve)\n\n![](img/image3-11d.jpg)\n\n## Colour scheme\n\n[ColorBrewer](http://colorbrewer2.org/)\n\n::::: columns\n::: {.column width=\"50%\"}\n![](img/image3-12a.jpg)\n:::\n\n::: {.column widht=\"50%\"}\n![](img/image3-12b.jpeg)\n:::\n:::::\n\n## Mapping packages in R\n\n::::: columns\n::: {.column width=\"50%\"}\n### Selected popular mapping packages\n\n[CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n-   [mapsf](https://riatelab.github.io/mapsf/index.html)\n-   [leaflet](https://cran.r-project.org/web/packages/leaflet/index.html)\n-   [ggplot2](https://ggplot2.tidyverse.org/index.html). Read [Chapter 6: Maps](https://ggplot2-book.org/maps.html) of 'ggplot2: Elegant Graphics for Data Analysis' for more detail.\n-   [ggmap](https://cran.r-project.org/web/packages/ggmap/index.html)\n-   [quickmapr](https://cran.r-project.org/web/packages/quickmapr/index.html)\n-   [mapview](https://cran.r-project.org/web/packages/mapview/index.html)\n:::\n\n::: {.column width=\"50%\"}\n### Other packages\n\n-   [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/index.html)\n-   [classInt](https://cran.r-project.org/web/packages/classInt/index.html)\n:::\n:::::\n\n## Introducing **tmap**\n\n::::: columns\n::: {.column width=\"50%\"}\n-   [**tmap**](https://r-tmap.github.io/tmap/index.html) is a R package specially designed for creating thematic maps using the pricinples of the **Grammar of Graphics**.\n-   It offers a flexible, layer-based, and easy to use approach to create thematic maps, such as choropleths and proportional symbol maps.\n-   It supports two modes: `tm_plot()` for static maps and `tm_view()` for interactive maps.\n-   It provides shiny integration with  `renderTmap()`, `tmapOutput()`, `tmapProxy()` and `tm_remove_layer()`.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image3-2.jpg)\n:::\n:::::\n\n------------------------------------------------------------------------\n\n### Shape objects\n\n-   *tmap* supports **simple features** from the new *sf* package.\n-   It also supports the class Spatial and Raster, respectively from the *sp* and the *raster* package. The supported subclasses are:\n\n![](img/image3-3.jpg)\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n### Plotting functions of **tmap**\n\nTwo approaches can be used to prepare thematic map using **tmap**, they are:\n\n-   Plotting a thematic map quickly by using `qtm()`.\n\n-   Plotting highly customisable thematic map by using tmap elements.\n\n------------------------------------------------------------------------\n\n### Plotting a choropleth map quickly by using `qtm()`\n\n:::::: columns\n::: {.column width=\"50%\"}\nThe easiest and quickest to draw a choropleth map using **tmap** is using `qtm()`. It is concise and provides a good default visualisation in many cases.\n\n-   `tmap_mode()` with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\n\n-   `fill` argument is used to map the attribute (i.e. DEPENDENCY)\n:::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpszpop2020, \n    fill = \"DEPENDENCY\")\n```\n:::\n\n:::\n::::\n::::::\n\n## **tmap** elements\n\n### `tm_shape()`\n\n-   The first element to start with is [`tm_shape()`](https://r-tmap.github.io/tmap/reference/tm_shape.html), which specifies the shape object.\n\n![](img/image3-4.jpg){fig-align=\"center\" width=\"450\"}\n\n## **tmap** elements\n\n### Base layers\n\n-   Next, one, or a combination of the following drawing layers should be specified:\n\n![](img/image3-5.jpg)\n\n-   Links to [`tm_polygons()`](https://r-tmap.github.io/tmap/reference/tm_polygons.html), [`tm_symbols()`](https://r-tmap.github.io/tmap/reference/tm_symbols.html), [`tm_lines()`](https://r-tmap.github.io/tmap/reference/tm_lines.html), [`tm_raster()`](https://r-tmap.github.io/tmap/reference/tm_raster.html) and [`tm_text()`](https://r-tmap.github.io/tmap/reference/tm_text.html)\n\n## **tmap** elements\n\n### Base layers\n\n-   Each of these functions specifies the geometry, mapping, and scaling component of the LGTM.\n-   An aesthetic can take a constant value, a data variable name, or a vector consisting of values or variable names.\n-   If a data variable is provided, the scale is automatically configured according to the values of this variable, but can be adjusted with several arguments. For instance, the main scaling arguments for a color aesthetic are color palette, the preferred number of classes, and a style to create classes.\n-   Also, for each aesthetic, except for the text labels, a legend is automatically created.\n-   If a vector of variable names is provided, small multiples are created, which will be explained further below.\n\n## **tmap** elements\n\n### Derived layers\n\n::::: columns\n::: {.column width=\"40%\"}\nEach aesthetic can take a constant value or a data variable name. For instance, `tm_fill(col=\"blue\")` colors all polygons blue, while `tm_fill(col=\"var1\")`, where \"var1\" is the name of a data variable in the shape object, creates a choropleth.\n:::\n\n::: {.column width=\"60%\"}\nThe supported derived layers are as follows:\n\n![](img/image3-6.jpg)\n:::\n:::::\n\n------------------------------------------------------------------------\n\n### Drawing a base map\n\n::::::: columns\n:::: {.column width=\"50%\"}\nThe basic building block of **tmap** is `tm_shape()` followed by one or more layer elements such as `tm_fill()` and `tm_polygons()`.\n\n::: callout-warning\n### Be warned\n\nThe \"+\" sign should be place at the end of a code line and not at the front of a code line.\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020) +\n  tm_polygons()\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Drawing a choropleth map using *tm_polygons()*\n\n::::::: columns\n:::: {.column width=\"50%\"}\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *DEPENDENCY* to *tm_polygons()*.\n\n::: callout-tip\n### Things to learn from `tm_polygons()`:\n\n-   By default, 5 bins will be used.\n-   The default data classification method used is called \"pretty\".\n-   The default colour scheme used is \"YlOrRd\" of ColorBrewer. You will learn more about the color palette later.\n-   By default, Missing value will be shaded in gray.\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Drawing a choropleth map using `tm_fill()` and `tm_border()`\n\n::::::: columns\n:::: {.column width=\"50%\"}\n::: callout-note\n-   Actually, `tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()`.\n-   `tm_fill()` shades the polygons by using the default colour scheme.\n-   `tm_borders()` adds the borders of the shapefile onto the choropleth map.\n-   Notice that the planning subzones are shared according to the respective dependency values\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020) +\n  tm_fill(\"DEPENDENCY\")\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Drawing a choropleth map using `tm_border()`\n\n:::::::: columns\n::::: {.column width=\"50%\"}\nTo add the boundary of the planning subzones, `tm_border()` will be used.\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n:::\n\n:::\n\n::: callout-note\nNotice that light-gray border lines have been added on the choropleth map.\n\n-   *lwd* = border line width. The default is 1,\n-   *alpha* = transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1),\n-   *col* = border colour, and\n-   *lty* = border line type. The default is \"solid\".\n:::\n:::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  \n             alpha = 1)\n```\n:::\n\n:::\n::::\n::::::::\n\n## Data classification methods of **tmap**\n\n::::::: columns\n:::: {.column width=\"50%\"}\nMost choropleth maps employ some method of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n::: callout-note\n-   **tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n-   To define a data classification method, the *style* argument of `tm_fill()` or `tm_polygons()` will be used.\n-   The choropleth map on the right shows a quantile data classification with 8 classes are used.\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 8,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Comparing Quantile and Equal Interval\n\nChoropleth maps on the left and right below show *quantile* and *equal* data classification methods are used.\n\n-   Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n::::::: columns\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n:::::::\n\n## Colour Scheme\n\n::::::: columns\n:::: {.column width=\"50%\"}\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n::: callout-note\n-   To change the colour, we assign the preferred colour to *palette* argument of `tm_fill()`.\n-   Notice that the word **blues** is used instead of blue and the alphabet b is in uppercase.\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### More about colour\n\n::::::: columns\n:::: {.column width=\"50%\"}\n::: callout-note\n-   To reverse the colour shading, add a \"-\" prefix.\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\nNotice that the colour scheme has been reversed.\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### tmap Layouts\n\n:::: columns\n::: {.column width=\"50%\"}\n**Map layout** refers to the combination of all map elements into a cohensive map.\n\n-   **Map elements** include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios, while the colour settings and data classification methods covered in the previous section relate to the palette and break-points used to affect how the map looks.\n:::\n::::\n\n------------------------------------------------------------------------\n\n### **tmap** Legend\n\n:::::: columns\n:::: {.column width=\"50%\"}\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\", \n            main.title.position = \"center\", \n            main.title.size = 1, \n            legend.height = 0.45, \n            legend.width = 0.35, \n            legend.outside = FALSE, \n            legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE) + \n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### tmap style\n\n::::::: columns\n:::: {.column width=\"50%\"}\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`.\n\n::: callout-note\n-   \"white\": White background, commonly used colors (default)\n-   \"gray\"/\"grey\": Grey background, useful to highlight sequential palettes (e.g. in choropleths)\n-   \"natural\": Emulation of natural view: blue waters and green land\n-   \"bw\": Greyscale, obviously useful for greyscale printing\n-   \"classic\": Classic styled maps (recommended)\n-   \"cobalt\": Inspired by latex beamer style cobalt\n-   \"albatross\": Inspired by latex beamer style albatross\n-   \"beaver\": Inspired by latex beamer style beaver\n:::\n::::\n\n:::: {.column width=\"50%\"}\nChloropleth map below is plotted by using *classic* style.\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n:::\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Cartographic Furniture\n\n::: {style=\"font-size: 0.85em\"}\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines. In the choropleth below, [`tm_compass()`](https://r-tmap.github.io/tmap/reference/tm_compass.html), [`tm_scale_bar()`](https://r-tmap.github.io/tmap/reference/tm_scale_bar.html) and [`tm_grid()`](https://r-tmap.github.io/tmap/reference/tm_grid.html) are used to add compass, scale bar and grid lines onto the choropleth map.\n:::\n\n::: panel-tabset\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) + \n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\", \"bottom\"))\n```\n:::\n\n\n### The map\n\n\n::: {.cell}\n\n:::\n\n:::\n\n------------------------------------------------------------------------\n\n### Drawing Small Multiple Choropleth Maps\n\nSmall multiple maps, also refered to facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n-   by defining a group-by variable in *tm_facets()*, and\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n------------------------------------------------------------------------\n\n### By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining *ncols* in `tm_fill()`.\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n:::\n\n:::\n\n------------------------------------------------------------------------\n\n### By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n:::\n\n:::\n\n------------------------------------------------------------------------\n\n### By creating multiple stand-alone maps with `tmap_arrange()`\n\n:::::: columns\n:::: {.column width=\"50%\"}\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with [`tmap_arrange()`](https://r-tmap.github.io/tmap/reference/tmap_arrange.html).\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpszpop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpszpop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, \n             agedmap, \n             ncol=1)\n```\n:::\n\n:::\n::::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### By defining a group-by variable in `tm_facets()`\n\n:::::: columns\n:::: {.column width=\"50%\"}\nIn this example, multiple small choropleth maps are created by using [`tm_facets()`](https://r-tmap.github.io/tmap/reference/tm_facets.html).\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) + \n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\",\n                               \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### Mappping Spatial Object Meeting a Selection Criterion\n\n:::::: columns\n:::: {.column width=\"50%\"}\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\n::: {style=\"font-size: 1.2em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpszpop2020\n         [mpszpop2020$REGION_N==\"CENTRAL REGION\", ]) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \n                                \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n::::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n:::\n::::::\n\n## Reference\n\n### Principles, Concepts and Methods of Choropleth Maps Design\n\n**Core Reading**\n\n-   [Choropleth Maps](https://www.axismaps.com/guide/univariate/choropleth/)\n-   [The Basics of Data Classification](https://www.axismaps.com/guide/data/data-classification/)\n\n**Additional Readings**\n\n-   [Choropleth Maps -- A Guide to Data Classification](https://gisgeography.com/choropleth-maps-data-classification/)\n-   [Bivariate Choropleth](https://www.axismaps.com/guide/multivariate/bivariate-choropleth/)\n-   [Value-by-alpha maps](http://andywoodruff.com/blog/value-by-alpha-maps/)\n-   [What to consider when creating choropleth maps](https://blog.datawrapper.de/choroplethmaps/)\n-   [Choropleth Mapping with Exploratory Data Analysis](https://www.directionsmag.com/article/3363)\n\n## References\n\n### All About **tmap** package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [Development site](https://github.com/mtennekes/tmap)\n\n-   [tmap Reference](https://r-tmap.github.io/tmap/reference/index.html)\n\n-   [tmap: get started!](https://r-tmap.github.io/tmap/articles/tmap-getstarted.html)\n\n-   [tmap: version changes](https://r-tmap.github.io/tmap/articles/tmap-changes.html)\n\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](https://mtennekes.github.io/downloads/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap (useR!2017)](https://mtennekes.github.io/downloads/presentations/tmap_user2017.pdf)\n\n\n::: {.cell}\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}