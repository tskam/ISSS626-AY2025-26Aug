{
  "hash": "ffe3cea390871bb57f82536e6874dd8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 1: Geospatial Data Science with R\"\nauthor: \"Dr. Kam Tin Seong\"\ndate: \"2025-07-21\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD MMM YYYY\"\nexecute: \n  eval: false\n  echo: true\n  message: false\n  freeze: true\n---\n\n## Getting started\n\n1.  Launch the coursework project with RStudio\n2.  Create a new folder called *In-class_Ex*.\n3.  Create a new sub-folder inside the newly created *In-class_Ex* folder. Name the sub-folder *In-class_Ex01*.\n4.  Create a new Quarto document. Save the newly create qmd file in In-class_Ex01 sub-folder. Call the file *In-class_Ex01*.\n\n## Loading the R packages\n\n:::: panel-tabset\n### The task\n\nFor the purpose of this in-class exercise, the following R packages will be used:\n\n-   [tidyverse](https://www.tidyverse.org/)\n-   [sf](https://r-spatial.github.io/sf/)\n-   [tmap](https://r-tmap.github.io/tmap/)\n-   [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/)\n\nWrite a code chunk to check if these two packages have been installed in R. If yes, load them in R environment.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, ggstatsplot)\n```\n:::\n\n:::\n::::\n\n## Working with Master Plan Planning Sub-zone Data\n\n:::: panel-tabset\n### The task\n\n1.  Create a sub-folder called data in In-class_Ex01 folder.\n2.  If necessary visit data.gov.sg and download *Master Plan 2014 Subzone Boundary (Web)* from the portal. You are required to download both the ESRI shapefile and kml file.\n3.  Write a code chunk to import *Master Plan 2014 Subzone Boundary (Web)* in shapefile and kml save them in sf simple features data frame.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\nThis code chunk imports shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp <- st_read(dsn = \"data/\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n:::\n\n\nThis code chunk imports kml file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_kml <- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n```\n:::\n\n:::\n::::\n\n## Working with Master Plan Planning Sub-zone Data\n\n:::: panel-tabset\n### The task\n\n1.  Write a code chunk to export *mpsz14_shp* sf data.frame into **kml** file save the output in data sub-folder. Name the output file *MP14_SUBZONE_WEB_PL*.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n```\n:::\n\n:::\n::::\n\n## Working with Pre-school Location Data\n\n:::: panel-tabset\n### The task\n\n1.  If necessary visit data.gov.sg and download *Pre-Schools Location* from the portal. You are required to download both the kml and geojson files.\n2.  Write a code chunk to import *Pre-Schools Location* in kml geojson save them in sf simple features data frame.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\nThis code chunk imports kml file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_kml <- st_read(\"data/PreSchoolsLocation.kml\")\n```\n:::\n\n\nThis code chunk imports geojson file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_geojson <- st_read(\"data/PreSchoolsLocation.geojson\") \n```\n:::\n\n:::\n::::\n\n## Working with Master Plan 2019 Subzone Boundary Data\n\n::::: panel-tabset\n### The task\n\n1.  Visit data.gov.sg and download *Master Plan 2019 Subzone Boundary (No Sea)* from the portal. You are required to download both the kml file.\n2.  Move *MPSZ-2019* shapefile provided for In-class Exercise 1 folder on elearn to data sub-folder of In-class_Ex02.\n3.  Write a code chunk to import *Master Plan 2019 Subzone Boundary (No SEA)* kml and MPSZ-2019 into sf simple feature data.frame.\n\n### To import shapefile\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\")\n```\n:::\n\n:::\n\n### To import kml\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n:::\n\n:::\n:::::\n\n## Handling Coordinate Systems\n\n### Checking coordinate system\n\n:::: panel-tabset\n### The task\n\nWrite a code chunk to check the project of the imported sf objects.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz19_shp)\n```\n:::\n\n:::\n::::\n\n## Handling Coordinate Systems\n\n### Transforming coordinate system\n\n::::: panel-tabset\n### The task\n\nRe-write the code chunk to import the Master Plan Sub-zone 2019 and Pre-schools Location with proper transformation\n\n### To import MPSZ-2019\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n:::\n\n:::\n\n### To import PreSchoolsLocation.kml\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_read(\"data/PreSchoolsLocation.kml\") %>%\n  st_transform(crs = 3414)\n```\n:::\n\n:::\n:::::\n\n## Geospatial Data Wrangling\n\n### Point-in-Polygon count\n\n:::: panel-tabset\n### The task\n\nWrite a code chunk to count the number of pre-schools in each planning sub-zone.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))\n```\n:::\n\n:::\n::::\n\n## Geospatial Data Wrangling\n\n### Computing density\n\n:::: panel-tabset\n### The task\n\nWrite a single line code to perform the following tasks:\n\n1.  Derive the area of each planning sub-zone.\n\n2.  Drop the unit of measurement of the area (i.e. m\\^2)\n\n3.  Calculate the density of pre-school at the planning sub-zone level.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )\n```\n:::\n\n:::\n::::\n\n## Statistical Analysis\n\n:::: panel-tabset\n### The task\n\nUsing appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.\n\nTip: Refer to [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggscatterstats.html) of **ggstatsplot** package.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))\nmpsz$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) \nmpsz19_shp <- as.data.frame(mpsz19_shp)\n\nggscatterstats(data = mpsz19_shp,\n               x = `PreSch Density`,\n               y = `PreSch Count`,\n               type = \"parametric\")\n```\n:::\n\n:::\n\n### The plot\n\n\n::: {.cell}\n\n:::\n\n::::\n\n## Working with Population Data\n\n::: panel-tabset\n### The task\n\n1.  Visit and extract the latest Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling from Singstat homepage.\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2023.csv\")\n```\n:::\n\n:::\n\n## Data Wrangling\n\n::: panel-tabset\n### The task\n\n1.  Write a code chunk to prepare a data.frame showing population by Planning Area and Planning subzone\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>% \n  group_by(PA, SZ, AG) %>% \n  summarise(`POP`=sum(`Pop`)) %>%  \n  ungroup() %>% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\ncolnames(popdata2023)\n```\n:::\n\n:::\n\n## Data Processing\n\n::: panel-tabset\n### The task\n\nWrite a code chunk to derive a tibble data.framewith the following fields PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY where by:\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group.\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24\n         +rowSums(.[14])) %>% # Aged 5 - 9\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %>%  # Aged 60 -64\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %>% \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n:::\n\n## Joining popdata2023 and mpsz19_shp\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop2023_mpsz <- left_join(popdata2023, mpsz19_shp, \n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n```\n:::\n\n\n## Choropleth Map of Dependency Ratio by Planning Subzone\n\n::: panel-tabset\n### The map\n\n\n::: {.cell}\n\n:::\n\n\n### The code\n\n\n::: {.cell}\n\n:::\n\n:::\n\n## Analytical Map: Percentile Map\n\n### The concept\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n## Analytical Map: Percentile Map\n\n### Step 1: Data Preparation\n\nThe code chunk below excludes records with NA by using the code chunk below.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2023 <- mpsz_pop2023 %>%\n  drop_na()\n```\n:::\n\n:::\n\n## Analytical Map: Percentile Map\n\n### Step 2: The get function\n\nThe code chunk below defines a function to get the input data and field to be used for creating the percentile map.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n:::\n\n## Analytical Map: Percentile Map\n\n### Step 3: A percentile mapping function\n\nThe code chunk below creates a function for computing and plotting the percentile map.\n\n::: {style=\"font-size: 1.15em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(mpsz_pop2023) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n```\n:::\n\n:::\n\n## Analytical Map: Percentile Map\n\n### Step 4: Running the functions\n\nThe code chunk below runs the percentile map function.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap(\"DEPENDENCY\", mpsz_pop2023)\n```\n:::\n\n:::\n\n## Analytical Map: Box Map\n\n::::: columns\n::: {.column width=\"50%\"}\n### The Concept\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpsz_pop2023,\n       aes(x = \"\",\n           y = DEPENDENCY)) +\n  geom_boxplot()\n```\n:::\n\n:::\n:::::\n\n## Analytical Map: Box Map\n\n### Step 1: Creating the boxbreaks function\n\n:::::: columns\n::: {.column width=\"50%\"}\nThe code chunk on the right is an R function that creating break points for a box map.\n\n-   arguments:\n    -   v: vector with observations\n    -   mult: multiplier for IQR (default 1.5)\n-   returns:\n    -   bb: vector with 7 break points compute quartile and fences\n:::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.25em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n```\n:::\n\n:::\n::::\n::::::\n\n## Analyticsal Map: Box Map\n\n### Step 2: Creating the get.var function\n\n:::::: columns\n::: {.column width=\"50%\"}\nThe code chunk on the right an R function to extract a variable as a vector out of an sf data frame.\n\n-   arguments:\n    -   vname: variable name (as character, in quotes)\n    -   df: name of sf data frame\n-   returns:\n    -   v: vector with values (without a column name)\n:::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.25em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n:::\n::::\n::::::\n\n## Analytical Map: Box Map\n\n### Step 3: Boxmap function\n\n:::::: columns\n::: {.column width=\"50%\"}\nThe code chunk on the right is an R function to create a box map.\n\n-   arguments:\n    -   vnam: variable name (as character, in quotes)\n    -   df: simple features polygon layer\n    -   legtitle: legend title\n    -   mtitle: map title\n    -   mult: multiplier for IQR\n-   returns:\n    -   a tmap-element (plots a map)\n:::\n\n:::: {.column width=\"50%\"}\n::: {style=\"font-size: 1.25em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n```\n:::\n\n:::\n::::\n::::::\n\n## Analytical Map: Box Map\n\n### Step 4: Plotting Box Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxmap(\"DEPENDENCY\", mpsz_pop2023)\n```\n:::\n\n\n## Analytical Map: Box Map\n\n### Plotting Interactive Box Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\nboxmap(\"DEPENDENCY\", mpsz_pop2023)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}