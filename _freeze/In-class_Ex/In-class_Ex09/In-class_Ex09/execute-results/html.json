{
  "hash": "40845f07007f5265e66d21c242191df9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 9: Geography of Accessibility\"\nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2025-07-21\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD MMM YYYY\"\neditor: visual\nexecute: \n  eval: false\n  echo: true\n  warning: false\n  freeze: true\n---\n\n## Getting Started\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(SpatialAcc, sf, tidyverse, \n               tmap, ggstatsplot)\n```\n:::\n\n:::\n\n## Count Number of Points within a Distance\n\n::::::::::::: panel-tabset\n### The task\n\n-   To count number of point features (i.e. CHAS clinics) within 1km of another point features (i.e. eldercare centre).\n\n::: callout-note\nTo complete this section of the in-class exercise, you need to download both the *CHAS Clinics* and *Eldercare Services* data sets from data.gov.sg portal. The in-class exercise assumes explicitly the downloaded data sets are saved in *rawdata* sub-folder of *In-class_Ex09* folder. Remember to unzip the file if necessary.\n:::\n\n### DIY\n\n-   Download *ELDERCARE* shapefile and *CHAS* kml file from data.gov.sg\n-   Using the steps your learned in Hands-on Exercise 1, import *ELDERCARE* shapefile and *CHAS* kml file into R\n\n### The code\n\n*ELDERCARE* is in shapefile format, the code chunk below will be used:\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/rawdata\",\n                     layer = \"ELDERCARE\") %>%\n  st_transform(crs = 3414)\n```\n:::\n\n:::\n\nThe code chunk below is used to import kml file.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nCHAS <- st_read(\"data/rawdata/CHASClinics.kml\") %>%\n  st_transform(crs = 3414)\n```\n:::\n\n:::\n\n### Buffering\n\nNext, `st_buffer()` of sf package is used to create a buffer of 1km around each eldercare features\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_1km <- st_buffer(eldercare, \n                        dist = 1000)\n```\n:::\n\n:::\n\n### Visualising\n\n::::::: columns\n:::: {.column width=\"40%\"}\nThe code chunk below is used to plot the newly created buffers and the CHAS clinics.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\ntm_shape(buffer_1km) +\n  tm_polygons() +\ntm_shape(CHAS) +\n  tm_dots()\n```\n:::\n\n:::\n::::\n\n:::: {.column width=\"60%\"}\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n:::\n\n:::\n::::\n:::::::\n\n### Counting points\n\nLastly, the code chunk below is used to count the number of CHAS clinics with 1km of each eldercare centre.\n\n::: {style=\"font-size: 1.50em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_1km$pts_count <- lengths(\n  st_intersects(buffer_1km, CHAS))\n```\n:::\n\n:::\n:::::::::::::\n\n## Importing Data\n\n::::: panel-tabset\n### Geospatail data\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_NO_SEA_PL\") %>%\n  st_transform(crs = 3414)\n\nhexagons <- st_read(dsn = \"data/geospatial\",\n                   layer = \"hexagons\") %>%\n  st_transform(crs = 3414)\n\neldercare <- st_read(dsn = \"data/geospatial\",\n                     layer = \"ELDERCARE\") %>%\n  st_transform(csr = 3414)\n```\n:::\n\n:::\n\n### OD Matrix\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", \n                     skip = 0)\n```\n:::\n\n:::\n:::::\n\n## Data cleaning and Updating Attributes\n\n:::::: panel-tabset\n### Supply\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n```\n:::\n\n:::\n\n### Demand\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)\n```\n:::\n\n:::\n\n### OD Matrix\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km <- as.matrix(distmat/1000)\n```\n:::\n\n:::\n::::::\n\n## Computing Handsen's Accessibility\n\n:::::: panel-tabset\n### The base code\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n```\n:::\n\n:::\n\n### Tidy the output\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen) <- \"accHansen\"\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n:::\n\n### Combine code chunk\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 0.5, \n                            family = \"Hansen\"))\n\ncolnames(acc_Hansen) <- \"accHansen\"\nacc_Hansen <- as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### Visualising Accessibility\n\n:::: panel-tabset\n#### The code\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n:::\n\n:::\n\n#### The plot\n\n\n::: {.cell}\n\n:::\n\n::::\n\n------------------------------------------------------------------------\n\n### Statistical graphic\n\n::::: panel-tabset\n### The code\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 1.5em\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = hexagon_Hansen,\n  x = REGION_N,\n  y = accHansen,\n  type = \"p\")\n```\n:::\n\n:::\n\n### The plot\n\n\n::: {.cell}\n\n:::\n\n:::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}